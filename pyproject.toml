[project]
name = "helloworld"
description = "Python project template"
authors = [
    {name = "Victor Payno", email = "vpayno@users.noreply.github.com"},
]
maintainers = [
    {name = "Victor Payno", email = "vpayno@users.noreply.github.com"},
]
dependencies = [
    "rich>=13.7.0",
]
requires-python = ">=3.12"
dynamic = ["version"]
readme = "README.md"
license-files.paths = [
    "LICENSE-MIT",
    "LICENSE-APACHE"
]
keywords = []

[project.urls]
"Homepage" = "https://github.com/vpayno/python-template"
"Bug Tracker" = "https://github.com/vpayno/python-template/issues"
"Repository" = "https://github.com/vpayno/python-template.git"
"Changelog" = "https://github.com/vpayno/python-template/releases"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pyright]
include = ["src", "tests"]

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
# select = []
# ignore = []
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality =true
warn_return_any = true

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
line_length = 120
skip_gitignore = true

[tool.pdm]
distribution = true
[tool.pdm.dev-dependencies]
dev = [
    "pytest>=8.1.1",
    "pytest-cov>=4.1.0",
    "pytest-randomly>=3.15.0",
    "pytest-datafiles>=3.0.0",
    "mypy>=1.9.0",
    "mypy-extensions>=1.0.0",
    "pyright>=1.1.353",
    "refurb>=2.0.0",
    "ruff>=0.3.2",
    "pylint>=3.1.0",
    "bandit>=1.7.8",
    "mkdocs>=1.5.3",
    "pdoc3>=0.10.0",
    "safety>=3.2.0",
    "perflint>=0.8.1",
]

[tool.pdm.version]
source = "scm"
write_to = "helloworld/_version.py"
write_template = "# pylint: disable-all\n__version__ = '{}'  # pragma: no cover\n"

[tool.pdm.scripts]
main = { call = "python-template:main" }
module = { shell = "python -m python-template" }

clean_docs = { shell = "rm -rf html mkdocs python-template.html python-template.md python-template.txt" }
clean_pycache = { shell = "find . -type f -name '*.py[co]' -delete -print -o -type d -name __pycache__ -delete -print" }
clean_other = { shell = "rm -rf .mypy_cache .pdm-build .pytest_cache" }
clean_build = { shell = "rm -rf dist" }
clean = { composite = ["clean_docs", "clean_pycache", "clean_other", "clean_build"] }

format = { shell = "ruff format" }

ci-ruff = { shell = "ruff check" }
ci-pylint = { shell = "pylint --ignore-patterns='_[a-z][a-z0-9_-]+.py' ./src ./tests" }
ci-pyright = { shell = "pyright --stats" }
ci-refurb = { shell = "refurb ./src ./tests" }
ci-bandit = { shell = "bandit --verbose --recursive ./src" }
ci-mypy = { shell = "mypy --install-types --non-interactive ./src ./tests" }
ci-lint = { composite = ["ci-ruff", "ci-pyright", "ci-pylint", "ci-refurb", "ci-mypy"] }

doctest = { shell = "python -m doctest -v ./src/*/[a-z]*.py" }
ci-pytest = { shell = "pytest --verbose --cov=. --cov-branch --cov-report=term-missing --cov-report=xml:.coverage.xml -p no:randomly ./tests" }
coverage_report = { shell = "coverage report --show-missing" }
coverage_annotate = { shell = "coverage annotate" }
test = { composite = ["doctest", "ci-pytest"] }

pydoc_text = { shell = "python -m pydoc python-template | tee python-template.txt" }
pydoc_html = { shell = "python -m pydoc -w python-template" }
pdoc_html = { shell = "pdoc --html --force ." }
mkdocs = { shell = "mkdocs new mkdocs && cd mkdocs && echo theme: readthedocs >> mkdocs.yml && yq --yaml-output . mkdocs.yml | sponge mkdocs.yml && mkdocs build" }
doc = { composite = ["pydoc_text", "pydoc_html", "pdoc_html", "mkdocs"] }

full = { composite = ["clean", "format", "lint", "test", "doc"] }

depupdate = { shell = "pdm outdated; pdm update; pdm lock; pdm sync; git add pyproject.toml pdm.lock; git status" }

[project.scripts]
helloworld = "helloworld.main:main"
